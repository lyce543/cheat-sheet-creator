import { type NextRequest, NextResponse } from "next/server"
import { jsPDF } from "jspdf"

export async function POST(request: NextRequest) {
  try {
    const { content } = await request.json()

    if (!content) {
      return NextResponse.json({ error: "Content is required" }, { status: 400 })
    }

    // Create new PDF document
    const doc = new jsPDF({
      orientation: "portrait",
      unit: "mm",
      format: "a4",
    })

    // Set up styling
    const pageWidth = doc.internal.pageSize.getWidth()
    const pageHeight = doc.internal.pageSize.getHeight()
    const margin = 20
    const maxWidth = pageWidth - 2 * margin
    let yPosition = margin

    // Helper function to add text with word wrapping
    const addText = (text: string, fontSize: number, isBold = false, isTitle = false) => {
      doc.setFontSize(fontSize)
      doc.setFont("helvetica", isBold ? "bold" : "normal")

      if (isTitle) {
        doc.setTextColor(41, 98, 255) // Primary blue color
      } else {
        doc.setTextColor(0, 0, 0)
      }

      const lines = doc.splitTextToSize(text, maxWidth)

      // Check if we need a new page
      if (yPosition + lines.length * (fontSize * 0.35) > pageHeight - margin) {
        doc.addPage()
        yPosition = margin
      }

      doc.text(lines, margin, yPosition)
      yPosition += lines.length * (fontSize * 0.35) + (isTitle ? 8 : 4)
    }

    // Add header
    doc.setFillColor(41, 98, 255)
    doc.rect(0, 0, pageWidth, 25, "F")
    doc.setTextColor(255, 255, 255)
    doc.setFontSize(20)
    doc.setFont("helvetica", "bold")
    doc.text("Job Interview Cheat Sheet", margin, 15)

    // Add generation date
    doc.setFontSize(10)
    doc.setFont("helvetica", "normal")
    const date = new Date().toLocaleDateString()
    doc.text(`Generated on ${date}`, pageWidth - margin - 40, 20)

    yPosition = 35

    // Process content sections
    const sections = content.split(/(?=\*\*[^*]+\*\*)|(?=#{1,3}\s)/)

    for (const section of sections) {
      if (!section.trim()) continue

      const lines = section.split("\n").filter((line) => line.trim())

      for (const line of lines) {
        const trimmedLine = line.trim()

        if (!trimmedLine) {
          yPosition += 3
          continue
        }

        // Handle markdown-style headers
        if (trimmedLine.startsWith("### ")) {
          addText(trimmedLine.replace("### ", ""), 14, true, false)
        } else if (trimmedLine.startsWith("## ")) {
          addText(trimmedLine.replace("## ", ""), 16, true, true)
        } else if (trimmedLine.startsWith("# ")) {
          addText(trimmedLine.replace("# ", ""), 18, true, true)
        }
        // Handle bold text
        else if (trimmedLine.startsWith("**") && trimmedLine.endsWith("**")) {
          addText(trimmedLine.replace(/\*\*/g, ""), 12, true, false)
        }
        // Handle bullet points
        else if (trimmedLine.startsWith("â€¢ ") || trimmedLine.startsWith("- ")) {
          addText(trimmedLine, 10, false, false)
        }
        // Regular text
        else {
          addText(trimmedLine, 10, false, false)
        }
      }

      yPosition += 5 // Add space between sections
    }

    // Add footer
    const totalPages = doc.getNumberOfPages()
    for (let i = 1; i <= totalPages; i++) {
      doc.setPage(i)
      doc.setFontSize(8)
      doc.setTextColor(128, 128, 128)
      doc.text(`Page ${i} of ${totalPages}`, pageWidth - margin - 20, pageHeight - 10)
      doc.text("Generated by CheatSheet Creator", margin, pageHeight - 10)
    }

    // Generate PDF buffer
    const pdfBuffer = Buffer.from(doc.output("arraybuffer"))

    // Return PDF as response
    return new NextResponse(pdfBuffer, {
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": "attachment; filename=job-cheatsheet.pdf",
      },
    })
  } catch (error) {
    console.error("Error generating PDF:", error)
    return NextResponse.json({ error: "Failed to generate PDF" }, { status: 500 })
  }
}
